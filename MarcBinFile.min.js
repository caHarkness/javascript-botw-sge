function MarcBinFile(a, b) { if ("function" != typeof window.FileReader) throw (console.error("MarcBinFile.js: Browser doesn't support FileReader."), "Invalid browser"); if ("object" == typeof a && a.name && a.size) (this.file = a), (this.fileName = this.file.name), (this.fileSize = this.file.size), (this.fileType = a.type); else if ("object" == typeof a && a.files) { if (1 != a.files.length) { for ( var c = [], d = a.files.length, e = function() { d--, 0 == d && b && b.call(); }, f = 0; f < a.files.length; f++) { c.push(new MarcBinFile(a.files[f], e)); } return c; } (this.file = a.files[0]), (this.fileName = this.file.name), (this.fileSize = this.file.size), (this.fileType = this.file.type); } else { if ("number" != typeof a) throw (console.error("MarcBinFile.js: Invalid type of file."), "Invalid file."); (this.file = !1), (this.fileName = "newfile.hex"), (this.fileSize = a), (this.fileType = "application/octet-stream"); } (this.littleEndian = (function() { var a = new ArrayBuffer(2); return new DataView(a).setInt16(0, 256, !0), 256 === new Int16Array(a)[0]; })()), this.file ? ((this.fileReader = new FileReader()), this.fileReader.addEventListener( "load", function() { this.dataView = new DataView(this.result); }, !1 ), b && this.fileReader.addEventListener("load", b, !1), this.fileReader.readAsArrayBuffer(this.file)) : ((this.fileReader = new ArrayBuffer(this.fileSize)), (this.fileReader.dataView = new DataView(this.fileReader)), b && b.call()); } (MarcBinFile.prototype.isReady = function() { return 2 == this.fileReader.readyState; }), (MarcBinFile.prototype.save = function() { var a; try { a = new Blob([this.fileReader.dataView], { type: this.fileType }); } catch (e) { if (e.name === "InvalidStateError") { var bb = new MSBlobBuilder(); bb.append(this.fileReader.dataView.buffer); a = bb.getBlob("application/octet-stream"); } } saveAs(a, this.fileName); }), (MarcBinFile.prototype.readByte = function(a) { return this.fileReader.dataView.getUint8(a); }), (MarcBinFile.prototype.readByteSigned = function(a) { return this.fileReader.dataView.getInt8(a); }), (MarcBinFile.prototype.readBytes = function(a, b) { for (var c = new Array(b), d = 0; d < b; d++) c[d] = this.readByte(a + d); return c; }), (MarcBinFile.prototype.readShort = function(a) { return this.fileReader.dataView.getUint16(a, this.littleEndian); }), (MarcBinFile.prototype.readShortSigned = function(a) { return this.fileReader.dataView.getInt16(a, this.littleEndian); }), (MarcBinFile.prototype.readInt = function(a) { return this.fileReader.dataView.getUint32(a, this.littleEndian); }), (MarcBinFile.prototype.readIntSigned = function(a) { return this.fileReader.dataView.getInt32(a, this.littleEndian); }), (MarcBinFile.prototype.readFloat32 = function(a) { return this.fileReader.dataView.getFloat32(a, this.littleEndian); }), (MarcBinFile.prototype.readFloat64 = function(a) { return this.fileReader.dataView.getFloat64(a, this.littleEndian); }), (MarcBinFile.prototype.readString = function(a, b) { for (var c = this.readBytes(a, b), d = "", e = 0; e < b && c[e] > 0; e++) d += String.fromCharCode(c[e]); return d; }), (MarcBinFile.prototype.writeByte = function(a, b) { this.fileReader.dataView.setUint8(a, b, this.littleEndian); }), (MarcBinFile.prototype.writeByteSigned = function(a, b) { this.fileReader.dataView.setInt8(a, b, this.littleEndian); }), (MarcBinFile.prototype.writeBytes = function(a, b) { for (var c = 0; c < b.length; c++) this.writeByte(a + c, b[c]); }), (MarcBinFile.prototype.writeShort = function(a, b) { this.fileReader.dataView.setUint16(a, b, this.littleEndian); }), (MarcBinFile.prototype.writeShortSigned = function(a, b) { this.fileReader.dataView.setInt16(a, b, this.littleEndian); }), (MarcBinFile.prototype.writeInt = function(a, b) { this.fileReader.dataView.setUint32(a, b, this.littleEndian); }), (MarcBinFile.prototype.writeIntSigned = function(a, b) { this.fileReader.dataView.setInt32(a, b, this.littleEndian); }), (MarcBinFile.prototype.writeFloat32 = function(a, b) { this.fileReader.dataView.setFloat32(a, b, this.littleEndian); }), (MarcBinFile.prototype.writeFloat64 = function(a, b) { this.fileReader.dataView.setFloat64(a, b, this.littleEndian); }), (MarcBinFile.prototype.writeString = function(a, b, c) { for (var d = 0; d < c; d++) this.writeByte(a + d, 0); for (var d = 0; d < b.length && d < c; d++) this.writeByte(a + d, b.charCodeAt(d)); });